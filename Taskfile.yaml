# https://taskfile.dev

version: '3'
vars:
  ARTIFACT_DIR: '{{.TASKFILE_DIR}}/artifacts'
  CLOUD_PROVIDER: '{{default "aws" .CLOUD_PROVIDER | lower}}'
  TERRAFORM_VERSION: '1.3.7'
  TERRAFORM_INSTALL_DIR: '{{.ARTIFACT_DIR}}/terraform/{{.TERRAFORM_VERSION}}'

  PUBLIC_KEY_DEFAULT: '{{.ARTIFACT_DIR}}/testkey.pub'
  PRIVATE_KEY_DEFAULT: '{{.ARTIFACT_DIR}}/testkey'
  PUBLIC_KEY: '{{ .PUBLIC_KEY | default .PUBLIC_KEY_DEFAULT}}'
  PRIVATE_KEY: '{{ .PRIVATE_KEY | default .PRIVATE_KEY_DEFAULT}}'
  DEPLOYMENT_ID: '{{default "devex-cicd" .DEPLOYMENT_ID}}'
  NUM_NODES: '{{default "3" .NUM_NODES}}'
  ENABLE_MONITORING: '{{default "true" .ENABLE_MONITORING}}'
  TIERED_STORAGE_ENABLED: '{{ .TIERED_STORAGE_ENABLED | default "false"}}'
  ALLOW_FORCE_DESTROY: '{{ .ALLOW_FORCE_DESTROY | default "true"}}'
  VPC_ID: '{{ .VPC_ID | default "" }}'
  BUCKET_NAME: '{{ .DEPLOYMENT_ID | replace "_" "-"}}-bucket'
  DISTRO: '{{ .DISTRO | default "ubuntu-focal" }}'

  # ansible stuff
  ANSIBLE_VERSION: '2.11.12'
  ANSIBLE_INSTALL_DIR: '{{.ARTIFACT_DIR}}/ansible/{{.ANSIBLE_VERSION}}'
  ANSIBLE_LOG_PATH: '{{.ARTIFACT_DIR}}/logs/{{.CLOUD_PROVIDER}}_{{.DEPLOYMENT_ID}}.log'
  ANSIBLE_INVENTORY: '{{.ARTIFACT_DIR}}/hosts_{{.CLOUD_PROVIDER}}_{{.DEPLOYMENT_ID}}.ini'
  ANSIBLE_COLLECTIONS_PATH: '{{ .ARTIFACT_DIR }}/collections'
  ANSIBLE_ROLES_PATH: '{{ .ARTIFACT_DIR }}/roles'
  TF_SSH_USER_VAR:
    sh: |
      # ssh_user variable is expected for gcp
      if [[ "{{.CLOUD_PROVIDER}}" == "gcp" ]]; then
        echo "-var='ssh_user={{default .USER .TF_SSH_USER}}'"
      fi

env:
  TF_IN_AUTOMATION: '{{.CI}}'
  TF_DATA_DIR: '{{.CLOUD_PROVIDER}}'
  AWS_ACCESS_KEY_ID: '{{.DA_AWS_ACCESS_KEY_ID}}'
  AWS_SECRET_ACCESS_KEY: '{{.DA_AWS_SECRET_ACCESS_KEY}}'
  AWS_DEFAULT_REGION: '{{ default "us-west-2" .AWS_DEFAULT_REGION}}'

tasks:
  keygen:
    desc: generate ssh keys
    summary:
      Generates some local dummy keys to support running with terraform and ansible in CI and to try things out.
      If you have your own keys you should use them instead.
    run: always
    vars:
      SSH_EMAIL: '{{default "test@redpanda.com" .SSH_EMAIL | lower}}'
    cmds:
      - ssh-keygen -t rsa -b 4096 -C "{{.SSH_EMAIL}}" -N "" -f artifacts/testkey <<< y && chmod 0700 artifacts/testkey
    status:
      - test f artifacts/testkey

  build:
    desc: init and apply terraform
    summary: |
      You can set additional arguments to be consumed by terraform for building out the cluster by adding them after
      '--'when calling the task. You can set the number of nodes by setting NUM_NODES
      You may also want to set a backend for your runs if you are using something like Terraform Cloud to manage state.
      See the commented out line in cmds for an example of how to achieve this
      Please also note that if you set AWS_ACCESS_KEY_ID etc in your local environment before running this
      you won't have to worry about loading them as DA_AWS* because you'll override it. So it will just work.
    dir: "{{.CLOUD_PROVIDER}}/{{ .TF_DIR }}"
    vars:
      TF_DIR: '{{ default "" .TF_DIR }}'
      ANSIBLE_INVENTORY: '{{ .ANSIBLE_INVENTORY }}'
      TF_CMD: '{{ default "apply" .TF_CMD}}'
      DEPLOYMENT_ID: '{{ .DEPLOYMENT_ID }}'
    cmds:
      - |
        echo $PWD
        terraform init
        terraform {{.TF_CMD}} -auto-approve {{.TF_SSH_USER_VAR}} \
          -var='deployment_prefix={{.DEPLOYMENT_ID}}' \
          -var='public_key_path={{.PUBLIC_KEY}}' \
          -var='broker_count={{.NUM_NODES}}' \
          -var='enable_monitoring={{.ENABLE_MONITORING}}' \
          -var='tiered_storage_enabled={{.TIERED_STORAGE_ENABLED}}' \
          -var='allow_force_destroy={{.ALLOW_FORCE_DESTROY}}' \
          -var='vpc_id={{.VPC_ID}}' \
          -var='distro={{.DISTRO}}' \
          -var='hosts_file={{.ANSIBLE_INVENTORY}}' \
          -var='machine_architecture={{.MACHINE_ARCH}}' \
          -var='instance_type={{.INSTANCE_TYPE}}' \
          -var='aws_region={{.AWS_REGION}}' \
          {{.CLI_ARGS}}

  install-role-requirements:
    desc: install required ansible roles
    env:
      ANSIBLE_ROLES_PATH: '{{.ROLES_DIR}}'
      ANSIBLE_COLLECTION_INSTALL: '{{ .ANSIBLE_COLLECTION_INSTALL }}'
      ANSIBLE_COLLECTIONS_PATH: '{{ .ANSIBLE_COLLECTIONS_PATH }}'
    run: once
    cmds:
      - mkdir -p "{{ .ANSIBLE_ROLES_PATH}}"
      - ansible-galaxy install -r requirements.yml

  basic:
    desc: run an ansible playbook to create a basic private cluster
    summary: |
      You will need to export PRIV_KEY_LOC with the location of the private key matching the public key you provided
      in the terraform apply task for the ansible playbook to successfully connect and apply.
    deps:
      - install-role-requirements
    run: always
    env:
      ANSIBLE_INSTALL_DIR: '{{.ANSIBLE_INSTALL_DIR}}'
      ANSIBLE_LOG_PATH: '{{.ANSIBLE_LOG_PATH}}'
      ANSIBLE_INVENTORY: '{{.ANSIBLE_INVENTORY}}'
      ANSIBLE_COLLECTIONS_PATH: '{{.ANSIBLE_COLLECTIONS_PATH}}'
      ANSIBLE_ROLES_PATH: '{{.ANSIBLE_ROLES_PATH}}'
    vars:
      ANSIBLE_PLAYBOOK: '{{default "provision-basic-cluster.yml" .ANSIBLE_PLAYBOOK}}'
      IS_USING_UNSTABLE: '{{ default false .IS_USING_UNSTABLE }}'
      SKIP_TAGS: '{{ default "" .SKIP_TAGS }}'
    cmds:
      - mkdir -p {{.ARTIFACT_DIR}}/logs
      - ansible-playbook ansible/{{.ANSIBLE_PLAYBOOK}} --private-key {{.PRIVATE_KEY}} --extra-vars is_using_unstable={{.IS_USING_UNSTABLE}} {{ .SKIP_TAGS }} {{.CLI_ARGS}}

  create-tls-cluster:
    desc: run multiple ansible playbooks to create a cluster with tls
    summary: |
      This command assumes you have the infrastructure in place and does not build it for you.
      Ensure you have a hosts file in the artifacts directory with name hosts_[CLOUD_PROVIDER]_[DEPLOYMENT_ID].ini
    deps:
      - install-role-requirements
    run: always
    cmds:
      - task: basic
        vars: { ANSIBLE_PLAYBOOK: "provision-tls-cluster.yml" }

  create-basic-cluster:
    desc: run multiple ansible playbooks to create a basic cluster
    summary: |
      This command assumes you have the infrastructure in place and does not build it for you.
      Ensure you have a hosts file in the artifacts directory with name hosts_[CLOUD_PROVIDER]_[DEPLOYMENT_ID].ini
    deps:
      - install-role-requirements
    run: always
    cmds:
      - task: basic
        vars: { ANSIBLE_PLAYBOOK: "provision-basic-cluster.yml" }

  create-tiered-storage-cluster:
    desc: run multiple ansible playbooks to create a cluster with tls
    summary: |
      This command assumes you have the infrastructure in place and does not build it for you.
      Ensure you have a hosts file in the artifacts directory with name hosts_[CLOUD_PROVIDER]_[DEPLOYMENT_ID].ini
    deps:
      - install-role-requirements
    run: always
    env:
      ANSIBLE_INSTALL_DIR: '{{.ANSIBLE_INSTALL_DIR}}'
      ANSIBLE_LOG_PATH: '{{.ANSIBLE_LOG_PATH}}'
      ANSIBLE_INVENTORY: '{{.ANSIBLE_INVENTORY}}'
      ANSIBLE_COLLECTIONS_PATH: '{{.ANSIBLE_COLLECTIONS_PATH}}'
      ANSIBLE_ROLES_PATH: '{{.ANSIBLE_ROLES_PATH}}'
    vars:
      SEGMENT_UPLOAD_INTERVAL: '{{ default "1" .SEGMENT_UPLOAD_INTERVAL }}'
      IS_USING_UNSTABLE: '{{ default false .IS_USING_UNSTABLE }}'
      ANSIBLE_PLAYBOOK: '{{ default "provision-tiered-storage-cluster.yml" .ANSIBLE_PLAYBOOK }}'
      CLOUD_STORAGE_CREDENTIALS_SOURCE: '{{ default "aws_instance_metadata" .CLOUD_STORAGE_CREDENTIALS_SOURCE}}'
    cmds:
      - task: basic
        vars: {
          ANSIBLE_PLAYBOOK: "{{ .ANSIBLE_PLAYBOOK }}",
          CLI_ARGS: "--extra-vars cloud_storage_credentials_source='{{ .CLOUD_STORAGE_CREDENTIALS_SOURCE }}' --extra-vars redpanda='{\"cluster\":{\"cloud_storage_segment_max_upload_interval_sec\":\"{{.SEGMENT_UPLOAD_INTERVAL}}\"}}'",
          IS_USING_UNSTABLE: "{{ .IS_USING_UNSTABLE }}"
        }

  create-proxy-cluster:
    desc: run multiple ansible playbooks to create a cluster with tls
    summary: |
      This command assumes you have the infrastructure in place and does not build it for you.
      Ensure you have a hosts file in the artifacts directory with name hosts_[CLOUD_PROVIDER]_[DEPLOYMENT_ID].ini
    deps:
      - install-role-requirements
    run: always
    env:
      ANSIBLE_INSTALL_DIR: '{{.ANSIBLE_INSTALL_DIR}}'
      ANSIBLE_LOG_PATH: '{{.ANSIBLE_LOG_PATH}}'
      ANSIBLE_INVENTORY: '{{.ANSIBLE_INVENTORY}}'
      ANSIBLE_COLLECTIONS_PATH: '{{.ANSIBLE_COLLECTIONS_PATH}}'
      ANSIBLE_ROLES_PATH: '{{.ANSIBLE_ROLES_PATH}}'
    vars:
      SEGMENT_UPLOAD_INTERVAL: '{{ default "1" .SEGMENT_UPLOAD_INTERVAL }}'
      IS_USING_UNSTABLE: '{{ default false .IS_USING_UNSTABLE }}'
      ANSIBLE_PLAYBOOK: '{{ default "proxy/provision-private-proxied-cluster.yml" .ANSIBLE_PLAYBOOK }}'
      SKIP_TAGS: '{{ default "" .SKIP_TAGS }}'
      SQUID_ACL_LOCALNET: '{{ default "" .SQUID_ACL_LOCALNET }}'
    cmds:
      - task: basic
        vars: {
          ANSIBLE_PLAYBOOK: "{{ .ANSIBLE_PLAYBOOK }}",
          CLI_ARGS: "--extra-vars '{\"squid_acl_localnet\": [\"{{.SQUID_ACL_LOCALNET}}\"]}' --extra-vars redpanda='{\"cluster\":{\"cloud_storage_segment_max_upload_interval_sec\":\"{{.SEGMENT_UPLOAD_INTERVAL}}\"}}'",
          IS_USING_UNSTABLE: "{{ .IS_USING_UNSTABLE }}",
          SKIP_TAGS: "{{ .SKIP_TAGS }}"
        }

  install-rpk:
    desc: installs rpk
    cmds:
      - mkdir -p {{.ARTIFACT_DIR}}/tmp
      - curl -L https://github.com/redpanda-data/redpanda/releases/latest/download/rpk-linux-amd64.zip -o {{.ARTIFACT_DIR}}/tmp/rpk-linux-amd64.zip
      - mkdir -p {{.ARTIFACT_DIR}}/bin
      - unzip -o {{.ARTIFACT_DIR}}/tmp/rpk-linux-amd64.zip -d {{.ARTIFACT_DIR}}/bin/
      - chmod 755 {{.ARTIFACT_DIR}}/bin/rpk
    status:
      - test -f '{{.ARTIFACT_DIR}}/bin/rpk || command -v rpk'

  test-basic-cluster:
    desc: tests that a public ip TLS cluster is WAD
    deps:
      - install-rpk
    vars:
      RPK_LOC: '{{.ARTIFACT_DIR}}/bin/rpk'
      ANSIBLE_INVENTORY: '{{.ARTIFACT_DIR}}/hosts_{{.CLOUD_PROVIDER}}_{{.DEPLOYMENT_ID}}.ini'
    cmds:
      - '{{.TASKFILE_DIR}}/.buildkite/scripts/test-basic-cluster.sh --hosts={{.ANSIBLE_INVENTORY}} --rpk={{.RPK_LOC}}'

  test-tls-cluster:
    desc: tests that a public ip TLS cluster is WAD
    deps:
      - install-rpk
    vars:
      RPK_LOC: '{{.ARTIFACT_DIR}}/bin/rpk'
      # this needs to go somewhere else badly
      CA_CRT: '{{ default "ansible/tls/ca/ca.crt" .CA_CRT }}'
      ANSIBLE_INVENTORY: '{{.ANSIBLE_INVENTORY}}'
    cmds:
      - '{{.TASKFILE_DIR}}/.buildkite/scripts/test-tls-cluster.sh --hosts={{.ANSIBLE_INVENTORY}} --cert={{.CA_CRT}} --rpk={{.RPK_LOC}}'

  test-tiered-storage-cluster:
    desc: tests that a public ip TLS cluster is WAD
    deps:
      - install-rpk
    vars:
      RPK_LOC: '{{.ARTIFACT_DIR}}/bin/rpk'
      # this needs to go somewhere else badly
      CA_CRT: '{{ default "ansible/tls/ca/ca.crt" .CA_CRT }}'
      ANSIBLE_INVENTORY: '{{.ANSIBLE_INVENTORY}}'
    cmds:
      - '{{.TASKFILE_DIR}}/.buildkite/scripts/test-tiered-storage-cluster.sh --hosts={{.ANSIBLE_INVENTORY}} --cert={{.CA_CRT}} --rpk={{.RPK_LOC}} --bucket={{.BUCKET_NAME}}'

  test-proxy-cluster:
    desc: tests that a proxied cluster is WAD
    vars:
      CA_CRT: '{{ default "/opt/rpk/certs/ca.crt" .CA_CRT }}'
      ANSIBLE_INVENTORY: '{{.ANSIBLE_INVENTORY}}'
    cmds:
      - '{{.TASKFILE_DIR}}/.buildkite/scripts/test-proxy-cluster.sh --hosts={{.ANSIBLE_INVENTORY}} --cert={{.CA_CRT}} --bucket={{.BUCKET_NAME}} --sshkey=artifacts/testkey'

  integration-aws:
    desc: Stand up an AWS cluster for integration testing
    vars:
      PREFIX: '{{default "" .PREFIX}}'
      DISTRO: '{{default "" .DISTRO}}'
      UNSTABLE: '{{default "" .UNSTABLE}}'
      TIERED: '{{default "false" .TIERED}}'
      TF_DIR: '{{default "" .TF_DIR}}'
      TASK_NAME: '{{default "" .TASK_NAME}}'
      MACHINE_ARCH: '{{default "x86_64" .MACHINE_ARCH}}'
      INSTANCE_TYPE: '{{default "i3.2xlarge" .INSTANCE_TYPE}}'
      NUM_NODES: '{{default "3" .NUM_NODES}}'
      AWS_REGION: '{{default "us-west-2" .AWS_REGION}}'
    cmds:
      - task: keygen
      - defer: |
          DEPLOYMENT_ID={{.PREFIX}} DISTRO={{.DISTRO}} AWS_REGION={{.AWS_REGION}} MACHINE_ARCH={{.MACHINE_ARCH}} INSTANCE_TYPE={{.INSTANCE_TYPE}} TIERED_STORAGE_ENABLED={{.TIERED}} TF_DIR={{.TF_DIR}} TF_CMD=destroy task build -- '-var=tags={
            "VantaOwner" : "devex@redpanda.com",
            "VantaNonProd" : "true",
            "VantaDescription" : "cicd-instance-for-devex",
            "VantaContainsUserData" : "false",
            "VantaUserDataStored" : "none",
            "VantaNoAlert" : "this-is-a-testing-instance-with-no-stored-data"
          }'
      - |
        DEPLOYMENT_ID={{.PREFIX}} NUM_NODES={{.NUM_NODES}} AWS_REGION={{.AWS_REGION}} DISTRO={{.DISTRO}} MACHINE_ARCH={{.MACHINE_ARCH}} INSTANCE_TYPE={{.INSTANCE_TYPE}} TIERED_STORAGE_ENABLED={{.TIERED}} TF_DIR={{.TF_DIR}} task build -- '-var=tags={
          "VantaOwner" : "devex@redpanda.com",
          "VantaNonProd" : "true",
          "VantaDescription" : "cicd-instance-for-devex",
          "VantaContainsUserData" : "false",
          "VantaUserDataStored" : "none",
          "VantaNoAlert" : "this-is-a-testing-instance-with-no-stored-data"
        }'
      - DEPLOYMENT_ID={{.PREFIX}} DISTRO={{.DISTRO}} IS_USING_UNSTABLE={{.UNSTABLE}} task "create-{{.TASK_NAME}}"
      - DEPLOYMENT_ID={{.PREFIX}} DISTRO={{.DISTRO}} task "test-{{.TASK_NAME}}"